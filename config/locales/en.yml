en:
  footer:
    supported_by: Supported by
    domain_and_community: Community and Domain by
    bare_metal_server: Bare Metal Servers by
    error_tracking: Error Tracking by

  sponsors:
    thanks: Many thanks to our sponsors!

  submit: Submit

  organizations:
    index:
      title: Benchmarks
      commits_benchmark: Commits Benchmarks
      releases_benchmark: Releases Benchmarks

  repos:
    select_benchmark: &select_benchmark
      Please select a benchmark
    script_title: "%{graph_name} Script"
    graph_title: &graph_title
      "%{graph_name} Graph (%{type})"
    benchmark_types: &benchmark_types
      Benchmark Types
    show_benchmark_types_form: Show Benchmark Types Form
    hide_benchmark_types_form: Hide
    no_results: >-
      "%{category}" does not have any results. Please select another
      Benchmark Type.
    view_github: View on Github
    run_locally_tip: You can run this benchmark locally using the <code>rubybench_runner</code> gem. More details <a href="%{path}">here</a>.

    index:
      commits_benchmark: Commits Benchmarks
      sparklines: "Sparklines are refreshed every 30 minutes."

    commits:
      graph_title: *graph_title
      title: "%{repo_name} Long Running Benchmarks"
      benchmark_types: *benchmark_types
      select_benchmark: *select_benchmark
      results: results
      show_last: Show the last
    releases:
      compare: Compare with
      title: "%{repo_name} Releases Benchmarks"
      benchmark_types: *benchmark_types
      select_benchmark: *select_benchmark
      graph_title: *graph_title

  static_pages:
    landing:
      call_to_action: "View All Tracked Repositories â†’"
    contribute:
      title: Contributing
      blurb: Where to start contributing?
      component_title: "The RubyBench project consists of the following components:"
      ruby_bench_web:
        name: RubyBench Web
        repo_name: 'ruby-bench-web'
        url: https://github.com/ruby-bench/ruby-bench-web
        desc: 'Web application to display and store results.'
      ruby_bench_docker:
        name: RubyBench Docker
        repo_name: 'ruby-bench-docker'
        url: https://github.com/ruby-bench/ruby-bench-docker
        desc: 'Docker scripts to run benchmarks.'
      ruby_bench_suite:
        name: RubyBench Suite
        repo_name: 'ruby-bench-suite'
        url: https://github.com/ruby-bench/ruby-bench-suite
        desc: 'Benchmark scripts.'
      ruby_bench_server:
        name: RubyBench Server
        repo_name: 'ruby-bench-server'
        url: https://github.com/ruby-bench/ruby-bench-server
        desc: 'Script to set up new bare metal servers.'
    sponsors:
      title: Sponsors
    run_locally:
      title: Run locally
      instructions: |
        The <a href="https://rubygems.org/gems/rubybench_runner">rubybench_runner</a> gem allows you to run the benchmarks locally. Note the gem is still under development and it's currently limited to the Rails benchmarks. Here is how you can use it:
        <ul class="instructions-list">
          <li>Install the gem:
            <pre>gem install rubybench_runner</pre>
          </li>
          <li>Clone the Rails repository:
            <pre>git clone https://github.com/rails/rails.git</pre>
          </li>
          <li>Pick one of the <a href="https://rubybench.org/rails/rails/commits">available rails benchmarks</a> and copy the GitHub link of the script (it's the "View on Github" button).</li>
          <li>Run:
            <pre>rubybench_runner run rails &lt;script_url&gt; &lt;path_to_rails_clone&gt;</pre>
          </li>
          <li>If the benchmark requires a database server, then you need to specify the <code>--db</code> option. Run <code>rubybench_runner --help</code> for details.</li>
        </ul>
        <h3>Database server requirement</h3>
        Scripts that contain <code>activerecord</code> or <code>scaffold</code> in their names are the scripts that require a database server. Supported database servers are PostgreSQL and MySQL.
        <br>
        <br>
        If the benchmark you want to run requires a database server, then depending on the <code>--db</code> option that you specified, the gem will install either the <code>pg</code> or <code>mysql2</code> gems which require some packages to be installed on your system. For the <code>mysql2</code> gem, you can see the required packages <a href="https://github.com/brianmario/mysql2#configuration-options">in their README</a>. For the <code>pg</code> gem, you'll need to install the <code>postgresql</code> and <code>libpq-dev</code> packages using your system package manager. On Ubuntu that would be <code>sudo apt-get install postgresql libpq-dev</code>.
        <br>
        <h3>Configurations</h3>
        On the first run the gem will create a file called <code>.rubybench_runner_config</code> in your home directory. This file allows you to configure the name of the database that the gem will create to run the benchmarks, as well as the database user, host and port. If you have the database server running locally and it's configured to allow peer authentication, then you shouldn't need to change anything in this file (unless you want to change the database name which defaults to <code>rubybench</code>). Note that the database user must have sufficient privileges to create a database on the server.
        <br>
        <h3>Feedback</h3>
        If you want to report an issue in the gem, propose a feature or suggest an improvment to this guide, feel free to post at <a href="https://community.rubybench.org/">community.rubybench.org</a>.

  top_nav:
    logo: RubyBench
    benchmarks: Benchmarks
    hardware: Hardware
    contribute: Contribute
    discuss: Discuss
    sponsors: Sponsors
    releases: Releases

  highcharts:
    subtitle:
      desktop: 'Click and drag in the plot area to zoom in'
      mobile: 'Pinch the chart to zoom in'
      commit_url: Click on a point to view and compare commits on GitHub

  admin:
    commits_run_header: 'Run commits'
    releases_run_header: 'Run releases'
    wait_commits_run: 'Wait while selected runs are being queued...'
    wait_releases_run: 'Wait while selected versions are being queued...'
    manual_run_pattern_label: 'Pattern:'
    commits_run_count_label: 'Run last:'
    releases_run_versions_label: 'Versions:'
    manual_run_button: 'Run'
    dashboard: 'Dashboard'
    repositories: 'Repositories'
    groups:
      new: 'New group'
      edit: 'Edit group'
      title: 'Benchmark groups'
